openapi: 3.0.0
info:
  description: |
    This is a sample Comment server.
  version: "1.0.0"
  title: Swagger Comment
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/eunchong2lee/eunchonglee/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: Comment
    description: Access to Petstore orders
paths:
  /api/board/{boardId}/comment:
    post:
      tags:
        - Comment
      summary: Add a new comment to the Board
      description : Return successful
      operationId : boardId
      parameters:
        - name : boardId
          in : path
          required : true
          description : boardId
          schema :
            type : number
      responses:
        '405':
          description: Invalid input
      requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  comment:
                    description: post your board comment
                    type: string
    put:
      tags:
        - Comment
      summary: Update an existing pet
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Board not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /pet/findByStatus:
    get:
      tags:
        - Comment
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: postBoardbyId
      parameters:
        - name: 
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - Comment
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true